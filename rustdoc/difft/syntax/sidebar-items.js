initSidebarItems({"enum":[["AtomKind",""],["MatchKind","A matched token (an atom, a delimiter, or a comment word)."],["Syntax",""],["TokenKind","Unlike atoms, tokens can be delimiters like `{`."]],"fn":[["change_positions","Walk `nodes` and return a vec of all the changed positions."],["change_positions_",""],["dbg_pos",""],["init_all_info","Initialise all the fields in `SyntaxInfo`."],["init_info",""],["init_info_single",""],["init_next_prev",""],["set_content_id",""],["set_next_sibling",""],["set_num_ancestors",""],["set_parent",""],["set_prev","For every syntax node in the tree, mark the previous node according to a preorder traversal."],["set_prev_is_contiguous",""],["set_prev_sibling",""],["set_unique_id",""],["split_comment_words",""],["split_words","Split `s` into a vec of things that look like words and individual non-word characters."],["zip_pad_shorter",""],["zip_repeat_shorter","Zip `lhs` with `rhs`, but repeat the last item from the shorter slice."]],"struct":[["MatchedPos",""],["SyntaxInfo","Fields that are common to both `Syntax::List` and `Syntax::Atom`."]],"type":[["ContentKey",""],["SyntaxId",""]]});